/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFunctionArray = require( '@stdlib/assert/is-function-array' );
var isFunction = require( '@stdlib/assert/is-function' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Returns a reusable middleware function.
*
* @param {FunctionArray} fcns - array of middleware functions
* @param {Callback} errback - callback to invoke upon encountering an error
* @throws {TypeError} first argument must be an array of functions
* @throws {TypeError} second argument must be a function
* @returns {Function} middleware function
*/
function factory( fcns, errback ) {
	if ( !isFunctionArray( fcns ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a function array. Value: `%s`.', fcns ) );
	}
	if ( !isFunction( errback ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', errback ) );
	}
	return middleware;

	/**
	* Executes middleware functions in order.
	*
	* @private
	* @param {Object} request - request object
	* @param {Object} reply - reply object
	* @param {Callback} [done] - callback to invoke upon completion
	* @returns {void}
	*/
	function middleware( request, reply, done ) {
		var self = this; // eslint-disable-line no-invalid-this
		var idx = -1;
		return next();

		/**
		* Executes the next middleware function.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @returns {void}
		*/
		function next() {
			// Check for an error...
			if ( arguments[ 0 ] ) {
				return errback( arguments[ 0 ], request, reply, next );
			}
			// Update the counter and check if we have run all functions...
			idx += 1;
			if ( idx >= fcns.length ) {
				return ( done ) ? done() : void 0;
			}
			// Call the next middleware function:
			fcns[ idx ].call( self, request, reply, next );
		}
	}
}


// EXPORTS //

module.exports = factory;
